[
    {
        "query": "How can I find my current working directory in a Linux OS using Python?",
        "model_answer": "",
        "original": {
            "domain": "linux",
            "framework": "OS",
            "functionality": "Get the current working directory",
            "api_name": "Get Current Working Directory",
            "api_call": "os.getcwd()",
            "api_arguments": "None",
            "python_environment_requirements": "import os",
            "description": "This linux API is used to get the current working directory. The API returns a string representing the current working directory.",
            "example_code": [
                {
                    "description": "Example to show usage of getcwd()",
                    "code": "import os\nprint(os.getcwd())"
                }
            ]
        }
    },
    {
        "query": "I need to install the RPM package named postgresql-9.2.24-1.fc29.i686.rpm on my linux system. What would be the command for this using RPM commands?",
        "model_answer": "rpm -ivh postgresql-9.2.24-1.fc29.i686.rpm",
        "original": {
            "domain": "linux",
            "framework": "RPM (RedHat Package Manager)",
            "functionality": "Package management",
            "api_name": "RPM commands",
            "api_call": "rpm -ivh [package_name]",
            "api_arguments": [
                "package_name"
            ],
            "python_environment_requirements": "Python not required",
            "example_code": [
                {
                    "description": "Install an RPM package",
                    "code": "rpm -ivh pidgin-2.7.9-5.el6.2.i686.rpm"
                }
            ],
            "description": "RPM is used for installing, uninstalling, upgrading, querying, verifying, and managing software packages in linux. It deals with .rpm files, which contain the actual information about the packages such as what it is, from where it comes, dependencies info, version info etc. It keeps the information of all the installed packages under /var/lib/rpm database."
        }
    },
    {
        "query": "I need to terminate a Linux process immediately with the process id 5412.",
        "model_answer": "kill -9 5412",
        "original": {
            "domain": "linux",
            "framework": "Command-Line",
            "functionality": "Process Management",
            "api_name": "Kill Command",
            "api_call": "kill -9 3139",
            "api_arguments": [
                "-9",
                "3139"
            ],
            "python_environment_requirements": "Python not required",
            "example_code": [
                {
                    "description": "To kill a process with process id 3139",
                    "code": "kill -9 3139"
                }
            ],
            "description": "The kill command in linux is used to send a signal to a process. By default, it sends a TERM signal, which requests the process to terminate. However, the process may choose to ignore this signal. The -9 option sends a KILL signal, which forces the process to terminate immediately. The process cannot ignore a KILL signal. The kill command requires the process id (PID) as an argument. The PID can be found using commands such as ps, pidof, or pgrep."
        }
    },
    {
        "query": "How do I change the root directory of the current process to the path /home/user/sandbox in Python on a Linux OS?",
        "model_answer": "import os",
        "original": {
            "domain": "linux",
            "framework": "os",
            "functionality": "Change the root directory of the current process",
            "api_name": "chroot",
            "api_call": "os.chroot(path)",
            "api_arguments": [
                {
                    "name": "path",
                    "type": "string",
                    "description": "The path to the new root directory."
                }
            ],
            "python_environment_requirements": [
                {
                    "name": "os",
                    "version": "Python Standard Library"
                }
            ],
            "example_code": [
                {
                    "description": "Change the root directory to '/tmp'",
                    "code": "import os\nos.chroot('/tmp')"
                }
            ],
            "description": "The chroot method in the os module of Python Standard Library is used to change the root directory of the current process to the path specified. This can be useful in creating a sandbox environment for the process where it can't access files outside the new root directory."
        }
    },
    {
        "query": "How can I remove empty directories, dir1, dir2 and dir3 using the command line in Linux?",
        "model_answer": "rmdir dir1 dir2 dir3",
        "original": {
            "domain": "linux",
            "framework": "Command Line",
            "functionality": "Remove Directory",
            "api_name": "rmdir",
            "api_call": "rmdir directory_name",
            "api_arguments": [
                "directory_name"
            ],
            "python_environment_requirements": [
                "linux OS"
            ],
            "example_code": [
                {
                    "description": "Remove an empty directory",
                    "code": "rmdir dir1"
                },
                {
                    "description": "Remove multiple directories",
                    "code": "rmdir dir1 dir2 dir3"
                },
                {
                    "description": "Remove directory in verbose mode",
                    "code": "rmdir -v dir1"
                },
                {
                    "description": "Remove directory and all its ancestors",
                    "code": "rmdir -p -v dir1/dir2/dir3/dir4/dir5"
                },
                {
                    "description": "Ignore failure on non-empty directory",
                    "code": "rmdir --ignore-fail-on-non-empty dir1"
                },
                {
                    "description": "Use regular expressions to remove directories",
                    "code": "rmdir -v dir?"
                }
            ],
            "description": "The rmdir command in linux is used to remove directories. It can only remove empty directories. The command can be used with various options like -v for verbose mode, -p to remove a directory and all its ancestors and --ignore-fail-on-non-empty to suppress errors when trying to remove non-empty directories. Regular expressions can also be used with the rmdir command to match and remove directories."
        }
    }
]