[
    {
        "query": "I want to merge a single file using the 'git-merge-one-file' API.",
        "model_answer": "git.merge_one_file()",
        "original": {
            "domain": "git",
            "framework": "Git",
            "functionality": "Merging single file",
            "api_name": "git.merge_one_file",
            "api_call": "git merge-one-file",
            "api_arguments": [],
            "python_environment_requirements": [],
            "example_code": [],
            "description": "The 'git-merge-one-file' API is a standard helper program used with git merge-index to resolve a merge after the trivial merge done with git read-tree -m. This API is specifically used for merging a single file.",
            "api_name_original": "git-merge-one-file",
            "api_arguments_original": []
        }
    },
    {
        "query": "I want to show the canonical name and email address of a contact named Jane Smith using the git-check-mailmap API.",
        "model_answer": "git.check_mailmap(\"Jane Smith\")",
        "original": {
            "domain": "git",
            "framework": "git",
            "functionality": "Show canonical names and email addresses of contacts",
            "api_name": "git.check_mailmap",
            "api_call": "git check-mailmap [<options>] <contact>",
            "api_arguments": [
                {
                    "name": "stdin"
                },
                {
                    "name": "contact"
                }
            ],
            "python_environment_requirements": [],
            "example_code": [],
            "description": "The git-check-mailmap API is used to show the canonical names and email addresses of the given contacts. The API takes in a list of contacts as arguments and for each contact, it looks up the person\u2019s canonical name and email address. If found, it prints them; otherwise it prints the input as-is. The --stdin option allows the API to read contacts, one per line, from the standard input after exhausting contacts provided on the command-line.",
            "api_name_original": "git-check-mailmap",
            "api_arguments_original": [
                "--stdin",
                "<contact>"
            ]
        }
    },
    {
        "query": "Please provide me with the value of the GIT_COMMITTER_IDENT variable using the git-var API.",
        "model_answer": "git.var(\"GIT_COMMITTER_IDENT\")",
        "original": {
            "domain": "github",
            "framework": "git",
            "functionality": "showing a git logical variable",
            "api_name": "git.var",
            "api_call": "git var (-l | <variable>)",
            "api_arguments": [
                {
                    "name": "_l"
                },
                {
                    "name": "variable"
                }
            ],
            "python_environment_requirements": [
                "git"
            ],
            "example_code": [
                {
                    "description": "To display the GIT_AUTHOR_IDENT variable",
                    "code": "$ git var GIT_AUTHOR_IDENT"
                }
            ],
            "description": "The git-var API is used to print a Git logical variable. It exits with code 1 if the variable has no value. The '-l' argument causes the logical variables to be listed. In addition, all the variables of the Git configuration file .git/config are listed as well. However, the configuration variables listing functionality is deprecated in favor of git config -l.",
            "api_name_original": "git-var",
            "api_arguments_original": [
                "-l",
                "<variable>"
            ]
        }
    },
    {
        "query": "I want to update the auxiliary info file on my Git repository, and force the update.",
        "model_answer": "git.update_server_info(force=True)",
        "original": {
            "domain": "github",
            "framework": "git",
            "functionality": "Update auxiliary info file to help dumb servers",
            "api_name": "git.update_server_info",
            "api_call": "git update-server-info [-f | --force]",
            "api_arguments": [
                {
                    "name": "_f"
                },
                {
                    "name": "force"
                }
            ],
            "python_environment_requirements": "Git Python library",
            "example_code": [],
            "description": "A dumb server that does not do on-the-fly pack generations must have some auxiliary information files in $GIT_DIR/info and $GIT_OBJECT_DIRECTORY/info directories to help clients discover what references and packs the server has. This command generates such auxiliary files.",
            "api_name_original": "git-update-server-info",
            "api_arguments_original": [
                "-f",
                "--force"
            ]
        }
    },
    {
        "query": "I want to retrieve the Git revisions and ranges for a specific repository.",
        "model_answer": "git.gitrevisions()",
        "original": {
            "domain": "git",
            "framework": "git",
            "functionality": "Specifying revisions and ranges for Git",
            "api_name": "git.gitrevisions",
            "api_call": "gitrevisions",
            "api_arguments": "None",
            "python_environment_requirements": "None",
            "example_code": "None",
            "description": "The gitrevisions API allows users to specify revisions and ranges in Git. Many Git commands take revision parameters as arguments. Depending on the command, they denote a specific commit or, for commands which walk the revision graph, all commits which are reachable from that commit. For commands that walk the revision graph one can also specify a range of revisions explicitly. Some Git commands can also take revision parameters which denote other objects than commits, e.g. blobs ('files') or trees ('directories of files').",
            "api_name_original": "gitrevisions",
            "api_arguments_original": "None"
        }
    }
]